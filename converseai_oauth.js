/**
 * @file converseai_providers.js
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */

'use strict';
const Status                    = require('@converseai/plugins-sdk').Status;
const OAuth2SetupDataResponse   = require('@converseai/plugins-sdk').Payloads.OAuth2SetupDataResponse;
const OAuth2HandleCodeResponse  = require('@converseai/plugins-sdk').Payloads.OAuth2HandleCodeResponse;
//const Utils = require('./lib/utils.js');
const oauthUtil = require('./lib/oauthutil');

/**
* Triggers the OAuth2 process.
*/
var onOAuthStart = function(app, body) {
  var registrationData = body.payload.registrationData;
  var clientId = oauthUtil.getClientId(body);
  var response = new OAuth2SetupDataResponse();
  var oauth2Uri = "https://auth.atlassian.com/authorize";
  var audience="https://api.atlassian.com";
 // var clientId = "JnZngY1dNSdA6UzlgbuvplTodLff5G6F";
  var clientId = clientId;
  var authorizationScope ="read:jira-user write:jira-work read:jira-work";
  response.setOAuth2URI(oauth2Uri);
  response.setClientID(clientId);
  response.setScope(authorizationScope);
  response.setState("");
  response.setComment('<div>' +
    '<p>To link this workspace with a specific jira account, authenticate with the account.</p>' +
    '<p><cv-button cv-click="authenticate()">Authenticate</cv-button></p></div>');
    response.setExtraParams(null);
 // response.response_type("code");
 // response.prompt("consent");
   app.send(Status.SUCCESS, response);
}

/**
* Handle the OAuth code.
*/
var onOAuthHandleCode = function(app, body) {
  var registrationData = body.payload.registrationData.app;
  var clientId = oauthUtil.getClientId(body);
  var oauthGrant = {
    grant_type: 'authorization_code',
    code: body.payload.code,
    redirect_uri: body.payload.redirectURI,
    client_id: clientId,
    client_secret: registrationData.client_secret
  }

  oauthUtil.requestAccessToken(oauthGrant)
    .then((data) => {
      var response = new OAuth2HandleCodeResponse();
      response.setAccessToken(data.access_token);
      response.setRefreshToken(data.refresh_token);
      response.setTokenType("Bearer");
      response.setExpiresIn(data.expires_in);
      response.setGrantType("authorization_code");
      response.setMessage("Authentication successful");
      app.send(Status.SUCCESS, response);
    })
    .catch(error => {
      errorHandler.handleError(error, app);
    });
}

/**
* Renew the oauth token.
*/
var onOAuthRenewToken = function(app, body) {
  var registrationData = body.payload.registrationData.app;
  var clientId = oauthUtil.getClientId(body);
  var oauthGrant = {
    grant_type: 'refresh_token',
    redirect_uri: body.payload.redirectURI,
    client_id: clientId,
    client_secret: registrationData.client_secret,
    refresh_token: body.payload.renewToken
  }

  oauthUtil.requestAccessToken(oauthGrant)
    .then((data) => {
      var response = new OAuth2HandleCodeResponse();
      response.setAccessToken(data.access_token);
      response.setRefreshToken(data.refresh_token);
      response.setTokenType("Bearer");
      response.setExpiresIn(data.expires_in);
      response.setGrantType("authorization_code");
      response.setMessage("Authentication successful");
      app.send(Status.SUCCESS, response);
    })
    .catch(error => {
      errorHandler.handleError(error, app);
    });
}

module.exports = {
  onOAuthStart: onOAuthStart,
  onOAuthHandleCode: onOAuthHandleCode,
  onOAuthRenewToken: onOAuthRenewToken
}
