/**
 * @file converseai_providers.js
 *
 * Generated by the converse-cli tool for use with the Converse AI
 * Plugins SDK. https://developers.converse.ai/
 */
 var express = require('express');
 var server = express();
'use strict';
const Status                    = require('@converseai/plugins-sdk').Status;
const OAuth2SetupDataResponse   = require('@converseai/plugins-sdk').Payloads.OAuth2SetupDataResponse;
const OAuth2HandleCodeResponse  = require('@converseai/plugins-sdk').Payloads.OAuth2HandleCodeResponse;
const Utils = require('./lib/utils.js');
const oauthUtil = require('./lib/oauthutil.js');
const OAUTH_USER = 0;
const OAUTH_PROVIDER = 1;
/**
* Triggers the OAuth2 process.
*/
var onOAuthStart = function(app, body) {
  var response = new OAuth2SetupDataResponse();
  var oauth2Uri = "https://auth.atlassian.com/authorize";
  //var oauth2Uri = "https://cloudwave.bridge.smartsheet.com/";
  var registrationData = body.payload.registrationData;

  var audience="api.atlassian.com";
  var clientId = "JnZngY1dNSdA6UzlgbuvplTodLff5G6F";
  var authorizationScope ="read:jira-user write:jira-work read:jira-work manage:jira-data-provider";
  response.setOAuth2URI(oauth2Uri);
  response.setClientID(clientId);
  response.setScope(authorizationScope);
  response.setState("");
  response.setComment('<div>' +
    '<p>To link this workspace with a specific jira account, authenticate with the account.</p>' +
    '<p><cv-button cv-click="authenticate()">Authenticate</cv-button></p></div>');
  response.setExtraParams(null);
   app.send(Status.SUCCESS, response);
   
}
/**
* Handle the OAuth code.
*/
var onOAuthHandleCode = function(app, body) {

  if (body.isTest) {
    app.send(Status.SUCCESS, null);
    return
  }

  if (body.payload.oauthType === OAUTH_PROVIDER) {
    console.log("onOAuthHandleCode for provider");
  }

  var code = body.payload.code;
  console.log('onOAuthHandleCode Started***********************************');
  console.log('onOAuthStart Body Data:'+ JSON.stringify(body));
  console.log('onOAuthStart Body payload:'+ JSON.stringify(body.payload));
  console.log('onOAuthStart code:'+ JSON.stringify(body.payload.code));
  console.log('onOAuthHandleCode End***************************************');
  var conn = Utils.createConnection(null, body);
  if (conn.error != null) {
    app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", conn.error));
    return;
  }

  conn.authorize(code, function(err, userInfo) {
    if (err) {
      var errString = String(err);
      console.error(errString);
      app.send(Status.FAIL, new ErrorResponse(400, "INTERNAL", errString));
      return;
    }
  var app = body.payload.registrationData.app;
  oauthUtil.requestAccessToken(oauthGrant)
  .then((data) => {
    var response = new OAuth2HandleCodeResponse();
    response.setAccessToken(data.access_token);
    response.setRefreshToken(data.refresh_token);
    response.setTokenType("Bearer");
    response.setExpiresIn(data.expires_in);
    response.setGrantType("authorization_code");
    response.setMessage("Authentication successful");
    app.send(Status.SUCCESS, response);
    //oauthUtil.requestCloudid(data.access_token);
  })
  .catch(error => {
    console.log("Error in onOAuthHandleCode:"+error);
  });
  app.send(Status.SUCCESS, response);
 });
}

/**
* Renew the oauth token.
*/

var onOAuthRenewToken = function(app, body) {
 // var registrationData = body.payload.registrationData.app;
   //var clientId = oauthUtil.getClientId(body);
   // redirect_uri: body.payload.redirectURI,
  // client_id: clientId,
  // client_secret: registrationData.client_secret,
  var oauthGrant = {
    grant_type: "refresh_token",
    redirect_uri: "https://cloudwave.bridge.smartsheet.com/",
    client_id: "JnZngY1dNSdA6UzlgbuvplTodLff5G6F",
    client_secret: "Oa2YJOrNQQSEOWyG3X8tmXy3BVMbESuQWH3WV6gIUe-XcrO8neOTt8ztXu677bzj",
    refresh_token: body.payload.renewToken
  }

  oauthUtil.requestAccessToken(oauthGrant)
    .then((data) => {
      var response = new OAuth2HandleCodeResponse();
      response.setAccessToken(data.access_token);
      response.setRefreshToken(data.refresh_token);
      response.setTokenType("Bearer");
      response.setExpiresIn(data.expires_in);
      response.setGrantType("authorization_code");
      response.setMessage("Authentication successful");
      app.send(Status.SUCCESS, response);
    })
    .catch(error => {
      console.log("Error in onOAuthRenewToken:"+error);
    });
}

module.exports = {
  onOAuthStart: onOAuthStart,
  onOAuthHandleCode: onOAuthHandleCode,
  onOAuthRenewToken: onOAuthRenewToken
}
